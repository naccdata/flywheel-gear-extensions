"""ADD DETAIL HERE"""

import logging
import sys
from flywheel import Client
from flywheel_adaptor.flywheel_proxy import FlywheelProxy

from flywheel_gear_toolkit import GearToolkitContext
from inputs.configuration import ConfigurationError, get_group, get_project
from inputs.context_parser import ConfigParseError, get_config
from inputs.parameter_store import ParameterError, ParameterStore
from ${APPNAME}.main import run
from inputs.yaml import YAMLReadError, get_object_lists

from s3.s3_client import S3BucketReader


logging.basicConfig(stream=sys.stdout, level=logging.INFO)
log = logging.getLogger(__name__)

def main():
    """Describe gear detail here"""

    filename = '${FILEKEY}'
    with GearToolkitContext() as gear_context:
        gear_context.init_logging()

        # check for any necessary config arguments first and exit if not there
        try:
            # the following assumes using gearbot using parameter store and S3
            # path to parameters for S3 bucket
            s3_param_path: str = get_config(gear_context=gear_context, key='s3_param_path')
        except ConfigParseError as error:
            log.error('Incomplete configuration: %s', error.message)
            sys.exit(1)
        
        try:
            # assumes environment variables are available in FW
            # this has to be configured by FW to make the variables available
            # to the gear
            parameter_store = ParameterStore.create_from_environment()
            api_key = parameter_store.get_api_key()

            s3_parameters = parameter_store.get_s3_parameters(
                param_path=s3_param_path)
        except ParameterError as error:
            log.error('Parameter error: %s', error)
            sys.exit(1)
        
        dry_run = gear_context.config.get("dry_run", False)
        flywheel_proxy = FlywheelProxy(client=Client(api_key), dry_run=dry_run)

        # only needed if gear reads from S3
        s3_client = s3_client = S3BucketReader.create_from(s3_parameters)
        if not s3_client:
           log.error('Unable to connect to S3')
           sys.exit(1)

        # if the gear isn't run as as gearbot, use api-key passed in context
        # client = gear_context.client
        # if not client:
        #     log.error('No Flywheel connection. Check API key configuration.')
        #     sys.exit(1)
        # dry_run = gear_context.config.get("dry_run", False)
        # flywheel_proxy = FlywheelProxy(client=client, dry_run=dry_run)

        try:
            # use functions from inputs.configuration to get FW objects
            # based on context config keys. These raise exceptions 
            admin_group = get_group(context=gear_context,
                                    proxy=flywheel_proxy,
                                    key='admin_group',
                                    default='nacc')
            destination = get_project(context=gear_context,
                                      group=admin_group,
                                      project_key='destination')
            user_filename: str = get_config(gear_context=gear_context,
                                            key='user_file')
        except ConfigParseError as error:
            log.error('Incomplete configuration: %s', error.message)
            sys.exit(1)
        except ConfigurationError as error:
            log.error('Unable to save directory file: %s', error)
            sys.exit(1)

        # reads YAML input file with list of objects
        input_file = gear_context.get_input_path(filename) 
        try:
            object_list = get_object_lists(input_file)
        except YAMLReadError as error:
            log.error('No objects read from input')
            sys.exit(1)

        new_only = gear_context.config.get("new_only", False)
        run(proxy=flywheel_proxy,
            object_list=object_list,
            new_only=new_only)

    if __name__ == "__main__":
        main()
