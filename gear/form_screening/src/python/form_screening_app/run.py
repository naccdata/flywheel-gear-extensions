"""Entry script for Form Screening."""

import logging
import sys
import time
from typing import List, Optional

from event_logging.event_logging import VisitEventLogger
from flywheel_gear_toolkit import GearToolkitContext
from gear_execution.gear_execution import (
    ClientWrapper,
    GearBotClient,
    GearEngine,
    GearExecutionEnvironment,
    GearExecutionError,
    InputFileWrapper,
)
from gear_execution.gear_trigger import GearInfo
from inputs.parameter_store import ParameterStore
from pydantic import ValidationError
from s3.s3_bucket import S3BucketInterface
from utils.utils import load_form_ingest_configurations, parse_string_to_list

from form_screening_app.main import FormSchedulerGearConfigs, run

log = logging.getLogger(__name__)


class FormScreeningVisitor(GearExecutionEnvironment):
    """Visitor for the Form Screening gear."""

    def __init__(
        self,
        client: ClientWrapper,
        file_input: InputFileWrapper,
        accepted_modules: List[str],
        queue_tags: List[str],
        scheduler_gear: GearInfo,
        format_and_tag: bool,
        event_bucket: S3BucketInterface,
        config_input: InputFileWrapper,
    ):
        super().__init__(client=client)

        self.__file_input = file_input
        self.__accepted_modules = accepted_modules
        self.__queue_tags = queue_tags
        self.__scheduler_gear = scheduler_gear
        self.__format_and_tag = format_and_tag
        self.__event_bucket = event_bucket
        self.__config_input = config_input

    @classmethod
    def create(
        cls,
        context: GearToolkitContext,
        parameter_store: Optional[ParameterStore] = None,
    ) -> "FormScreeningVisitor":
        """Creates a gear execution object.

        Args:
            context: The gear context.
            parameter_store: The parameter store
        Returns:
          the execution environment
        Raises:
          GearExecutionError if any expected inputs are missing
        """
        client = GearBotClient.create(context=context, parameter_store=parameter_store)

        file_input = InputFileWrapper.create(input_name="input_file", context=context)

        if not file_input:
            raise GearExecutionError(
                "Gear config input_file not specified or not found"
            )

        form_configs_input = InputFileWrapper.create(
            input_name="form_configs_file", context=context
        )
        if not form_configs_input:
            raise GearExecutionError("missing expected input, form_configs_file")

        gear_name = context.manifest.get("name", "form-screening")

        # We save the formatted file with same name as input file
        # To prevent gear rules running into a loop check whether the file is screened
        # Check file.origin.type to identify whether the file is generated by a gear job
        file_entry = file_input.file_entry(context=context)
        if file_entry.origin.type == "job":
            log.info(
                "Skip processing input file %s generated by gear job %s",
                file_entry.name,
                file_entry.origin.id,
            )
            time.sleep(15)
            file_entry = file_entry.reload()
            if gear_name in file_entry.tags:
                log.info(
                    "Input file %s already screened and formatted", file_entry.name
                )
            sys.exit(0)

        config_file_path = context.get_input_path("scheduler_gear_configs_file")

        accepted_modules = parse_string_to_list(
            context.config.get("accepted_modules", None)
        )
        file_tags = parse_string_to_list(
            context.config.get("file_tags", None), to_lower=False
        )
        format_and_tag = context.config.get("format_and_tag", None)

        if not accepted_modules:
            raise GearExecutionError("No accepted_modules provided")
        if not file_tags:
            raise GearExecutionError("No file_tags provided")
        if not config_file_path:
            raise GearExecutionError("No scheduler gear config file specified")
        if format_and_tag is None:
            raise GearExecutionError("Missing required gear config format_and_tag")

        scheduler_gear = GearInfo.load_from_file(
            config_file_path, configs_class=FormSchedulerGearConfigs
        )
        if not scheduler_gear:
            raise GearExecutionError(
                f"Error(s) in reading scheduler gear configs file - {config_file_path}"
            )

        event_bucket_name = context.config.get("event_bucket", None)
        if event_bucket_name is None:
            raise GearExecutionError("event bucket name is required")
        event_bucket = S3BucketInterface.create_from_environment(event_bucket_name)

        return FormScreeningVisitor(
            client=client,
            file_input=file_input,  # type: ignore
            accepted_modules=accepted_modules,
            queue_tags=file_tags,
            scheduler_gear=scheduler_gear,
            format_and_tag=format_and_tag,
            event_bucket=event_bucket,
            config_input=form_configs_input,
        )

    def run(self, context: GearToolkitContext) -> None:
        """Runs the Form Screening app."""

        module = self.__file_input.get_module_name_from_file_suffix()
        if not module:
            raise GearExecutionError(
                f"Expect module suffix in input file name: {self.__file_input.filename}"
            )
        module = module.upper()

        try:
            form_configs = load_form_ingest_configurations(self.__config_input.filepath)
        except ValidationError as error:
            raise GearExecutionError(
                "Error reading form configurations file"
                f"{self.__config_input.filename}: {error}"
            ) from error

        if (
            module not in form_configs.accepted_modules
            or not form_configs.module_configs.get(module)
        ):
            raise GearExecutionError(
                f"Unsupported module {module} : {self.__file_input.filename}"
            )

        event_logger = VisitEventLogger(self.__event_bucket)

        error_writer = run(
            proxy=self.proxy,
            context=context,
            file_input=self.__file_input,
            accepted_modules=self.__accepted_modules,
            queue_tags=self.__queue_tags,
            scheduler_gear=self.__scheduler_gear,
            format_and_tag=self.__format_and_tag,
            event_logger=event_logger,
        )

        if error_writer:
            context.metadata.add_qc_result(
                self.__file_input.file_input,
                name="validation",
                state="FAIL",
                data=error_writer.errors().model_dump(by_alias=True),
            )


def main():
    """Main method for FormScreeningVisitor.

    Screens the input file and queue for processing.
    """

    GearEngine.create_with_parameter_store().run(gear_type=FormScreeningVisitor)


if __name__ == "__main__":
    main()
