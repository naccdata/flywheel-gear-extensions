"""ADD DETAIL HERE"""

import logging
import sys
from flywheel_adaptor.flywheel_proxy import FlywheelProxy

from inputs.arguments import build_base_parser
from flywheel_gear_toolkit import GearToolkitContext
from inputs.context_parser import parse_config
from inputs.environment import get_api_key
from inputs.yaml import get_object_list
from ${APPNAME}.main import run


logging.basicConfig(stream=sys.stdout, level=logging.INFO)
log = logging.getLogger(__name__)

def main():
    """Describe gear detail here"""

    parser = build_base_parser()
    args = parser.parse_args

    if args.gear:
        filename = '${FILEKEY}'
        with GearToolkitContext() as gear_context:
            gear_context.init_logging()
            context_args = parse_config(gear_context=gear_context,
                                        filename=filename)
            #
            # get argument values from context_args
            #
            admin_group_name = context_args['admin_group']
            dry_run = context_args['dry_run']
            new_only = context_args['new_only']
            input_file = context_args[filename] # gets the file name
    else:
        #
        # get argument values from args
        #
        dry_run = args.dry_run
        new_only = args.new_only
        input_file = args.filename
        admin_group_name = args.admin_group

    # assumes input file is a YAML file
    object_list = get_object_list(input_file)
    if not object_list:
        log.error('No objects read from input')
        sys.exit(1)

    api_key = get_api_key()
    if not api_key:
        log.error('No API key: expecting FW_API_KEY to be set')
        sys.exit(1)

    flywheel_proxy = FlywheelProxy(api_key=api_key, dry_run=dry_run)

    run(proxy=flywheel_proxy,
        object_list=object_list,
        new_only=new_only)
    

    if __name__ == "__main__":
        main()
